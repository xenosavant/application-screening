// <auto-generated />
using System;
using ApplicationScreening.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ApplicationScreening.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationScreening.Domain.Entities.ApplicationQuestionAggregate.ApplicationQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Question");

                    b.HasKey("Id");

                    b.ToTable("ApplicationQuestions");
                });

            modelBuilder.Entity("ApplicationScreening.Domain.Entities.JobApplicationAggregate.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("ApplicationScreening.Domain.Entities.JobApplicationAggregate.Response", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("JobApplicationId");

                    b.Property<Guid>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("JobApplicationId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("ApplicationScreening.Domain.Entities.ApplicationQuestionAggregate.ApplicationQuestion", b =>
                {
                    b.OwnsOne("ApplicationScreening.Domain.Entities.ApplicationQuestionAggregate.Answer", "Answer", b1 =>
                        {
                            b1.Property<Guid>("ApplicationQuestionId")
                                .ValueGeneratedOnAdd();

                            b1.Property<string>("Value");

                            b1.HasKey("ApplicationQuestionId");

                            b1.ToTable("ApplicationQuestions");

                            b1.HasOne("ApplicationScreening.Domain.Entities.ApplicationQuestionAggregate.ApplicationQuestion")
                                .WithOne("Answer")
                                .HasForeignKey("ApplicationScreening.Domain.Entities.ApplicationQuestionAggregate.Answer", "ApplicationQuestionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("ApplicationScreening.Domain.Entities.JobApplicationAggregate.Response", b =>
                {
                    b.HasOne("ApplicationScreening.Domain.Entities.JobApplicationAggregate.JobApplication")
                        .WithMany("Responses")
                        .HasForeignKey("JobApplicationId");

                    b.HasOne("ApplicationScreening.Domain.Entities.ApplicationQuestionAggregate.ApplicationQuestion", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("ApplicationScreening.Domain.Entities.ApplicationQuestionAggregate.Answer", "Answer", b1 =>
                        {
                            b1.Property<Guid>("ResponseId")
                                .ValueGeneratedOnAdd();

                            b1.Property<string>("Value");

                            b1.HasKey("ResponseId");

                            b1.ToTable("Responses");

                            b1.HasOne("ApplicationScreening.Domain.Entities.JobApplicationAggregate.Response")
                                .WithOne("Answer")
                                .HasForeignKey("ApplicationScreening.Domain.Entities.ApplicationQuestionAggregate.Answer", "ResponseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
